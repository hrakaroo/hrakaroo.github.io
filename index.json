
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"Software professional with twenty years’ experience in software development and eight years’ experience in engineering management.\nOutside work interests include hiking, climbing, public speaking and woodworking.\n","date":1702252800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1702252800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Software professional with twenty years’ experience in software development and eight years’ experience in engineering management.\nOutside work interests include hiking, climbing, public speaking and woodworking.","tags":null,"title":"Joshua Gerth","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Hugo Blox Builder’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://hrakaroo.com/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Hugo Blox Builder's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Joshua Gerth"],"categories":["Woodworking"],"content":" Background For the last 20+ years we’ve had a 48 inch round dining room table in our kitchen nook area. Like most folks, we ended up using this as our primary table and while it was great it was always a bit over sized for the space. Recently we were updating other parts of our house and decided to finally replace the table with a 42 inch one. In addition to it being Six inches smaller, we also wanted one that felt less bulky.\nSix inches may not seem like a lot but if we multiply it out, a 48 inch table as a surface area of approximately 1809 inches squared while a 42 inch table has a surface area of 1395 inches squared. Thats a difference of 414 square inches, so almost three full square feet smaller. That is a fair bit and the new table feels much smaller in the area.\nWe knew we wanted a solid hardwood table and we liked the look of white oak. Most of the tables we found on-line were either super expensive ($3000+) or had straight or chunky legs which we didn’t love. What we wanted was something closer to our outdoor table which has legs that curve into a center ring and then out again. After some research I decided to tackle the table myself. This was easily the biggest project I’d done to date.\nDesign Using SketchUp Maker (2017) I worked up some designs until I had something I was happy with. I knew I wanted to curve the legs in, but I wasn’t entirely sure how to do it. My initial idea (which you can sort of see in the sketch up) was to build the legs by laminating three thinner boards together. By overlapping them at the curve I thought I could build a strong joint. I still think this is a good design idea that would create a very strong curved leg, but in the end I went with a more traditional joint and just used dowels.\nWood After making a cut list I went down to Crosscut Hardwoods and picked up ~30 feet of 6/4 for the table top and ~15 feet of 8/4 for the legs. The total cost for the wood was around $400.\nOnce I had the wood home I let it acclimate in my house for about a week before milling it down. While I do have a planer I don’t have a jointer so I had to use a sled for the planer to get one side flat and a simple jig for my table saw to get a straight edge.\nTable Top After finding an arrangement I liked for the top I glued the boards together and let them dry overnight.\nMistake #1\nI opted to not use any dowels or biscuits as they don’t really do much for adding strength. This proved to be a mistake as I didn’t get the boards perfectly flush and after it dried I had to take a hand plane and resurface both the top and bottom. Next time I’m probably going to put at least a couple of dowels in to assist with alignment\nOnce the top was dry I used a circle cutting jig and a spiral bit on my plunge router to cut the circle. I only cut it 3/4 of the way down before flipping the top over and using a flush trim bit on my trim router to finish the circle.\nMistake #2\nI wasn’t entirely sure how far to plunge cut before flipping the table over. Several of the videos I watched on this seemed to suggest you only needed to make one or two passes with the router before flipping the table over. Thankfully I took it down further as my trim router was barely able to cut through what I had left. In the future it’s probably safer to take this down to 1/4 inch before flipping.\nLegs For the legs I first used cardboard to try out several different variations until I found something I liked. Although I had my sketchup design it helps to actually see it in person. Plus, once I had my cardboard template I was able to work backwards to figure out how big my leg blanks needed to be.\nTo do this I took my cardboard template and cut it right where I was picturing my joint to be. Then I was able to flip over the top piece and tape it back together which gave me an approximate template for how big I needed to cut each leg blank. Since I kept top and bottom leg angles the same, the resulting template was now perfectly straight and the taped cut line gave me the exact angle I needed.\nLining up the dowels for the joints was a process but everything came together pretty well in the end.\nI did have some concerns that the dowel joints might now be strong enough as the pressure from the table to would basically be trying to pry them apart. To counter act this I made sure that when I jointed in my cross pieces that I used four dowels which really locked in this joint.\n(And yes, I used more glue than what is shown. I had forgotten to take a picture, so I stopped in the middle of my glue up to snap this one.)\nMistake #3\nClamping the legs proved more difficult than I anticipated. I first tried the trick of gluing cauls to some blue tape, but those popped off pretty quickly when I started to tighten the clamps. Thankfully I had created some angle extensions that I was able to clamp to the individual pieces and then add an additional clamp. If I had to do it over again I would plan this part out better.\nOnce set I built a simple jig so that …","date":1702252800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702252800,"objectID":"36d9876bc9dbcb59f15a0a3576441ccd","permalink":"https://hrakaroo.com/post/white-oak-table/","publishdate":"2023-12-11T00:00:00Z","relpermalink":"/post/white-oak-table/","section":"post","summary":"Building a kitchen nook table","tags":null,"title":"42 Inch Round Table in White Oak","type":"post"},{"authors":["Joshua Gerth"],"categories":["Climbing"],"content":" Background In March 2022 I was accepted into the Mazamas BCEP program which taught basic rock and snow climbing skills. This was a fantastic experience and I highly recommend the program if you are in the Northwest and are at all interested in hiking and climbing. Once the program completed I signed up to join the Mt. Hood Climb scheduled for May 8, 2022 (mothers day), which was eventually pushed back to the following Wednesday (May 11th) due to weather conditions. There were a total of nine people (including the climb leaders) in the climbing group.\nThe day before The day before the climb I drove up to Timberline Lodge and parked in the lower parking lot that allows climbers to camp/park overnight. In the weeks before the climb I had built a flat “bed” in the back of my Honda Pilot so I could put a sleeping pad down and stretch out.\nIt’s a really good idea to get to the parking lot the night before and start to acclimate to the altitude. Timberline lodge is at around 6,000 ft of elevation and the top of Mt. Hood is 11,249 so the more time you have to acclimate the better.\nSix of the nine people from our group opted to show up the night before with three people driving up the morning of the climb. Initially we were planning to start our climb at 1am the next morning, but due to temperatures being lower than expected we were able to push our start time back to 2pm.\nAs the temperature heats up it can cause the ice and snow to soften creating dangerous climbing conditions as rocks and ice are more likely to break away and fall on you. Additionally, warmer temperatures weaken the structure of snow bridges over crevasses which increases risk. Ideally you want to climb when everything is frozen solid and stable.\nSo after rechecking my pack several times I finally went to sleep around 8pm.\nThe day of Getting Ready For a start time of 2am I should ideally have woken up at 1am to begin getting ready, but due to nerves I awoke up closer to 12am and was unable to fall back asleep. So at 12:30am I gave up trying and started getting ready for the climb. The day before I had prepared oatmeal in a thermos with hot water which made for nice warm breakfast. After breakfast I started to get my gear on and mentally prepare for the climb.\nIn addition to everything in my pack, I was also carrying one of the climbing ropes we were bringing in case we needed it going over the bergschrund. This added around 15 lbs to my pack and was a bit awkward to carry as you have to sling it over your pack. (I was also carring the fuel for the teams stove in my pack as we were required to bring it, but this only added a nominal amount of weight.)\nStarting the climb Just before 2am we started off. The night was amazingly clear but exceedingly cold. As we were hiking up we could see the headlights from other climbers further up the mountain who had left earlier.\nThe first part of the climb takes you to the top of the Palmer Lift and the route you take is along the “road” the snowcats create when coming back after grooming the ski slope. So the snow is pretty compacted and you can climb it easily in just your mountaineering boots and without crampons. (Crampons are great, but they are heavy, increase the likelihood of tripping, and generally slow you down.)\nSilcox Hut At approximately 3am we reached Silcox Hut and two things had already happened. First, two people decided to drop out of the climb as they were not feeling well. (It should be noted that both of these people were from the group that decided to drive up the morning of the climb so they did not have the extra six plus hours to acclimate to the altitude.)\nSecondly, my water was starting to freeze. I had made the mistake of using a bladder for my water with an attached hose for drinking. This was the same setup I had used on multiple hikes and ski trips so I thought that as long as, after taking a drink, I blew air into my hose I could keep it mostly thawed. The problem was that the nozzle had collected water and was mostly frozen solid. After a lot of work I managed to get it somewhat unclogged and had, what would turn out to be, my last sip of water until after I was off the summit. In retrospect this was a huge and possibly dangerous mistake on my part and I should have carried backup water in my pack.\nSomewhere between Silcox Hut and the top of the Palmer lift we started to get whiffs of the fumaroles on Mt. Hood which smells strong of sulfur.\nTop of Palmer At 4:40am we reached the top of the Palmer lift. The sun was starting to come up a bit but it was still really cold.\nFor the climb up to the Hogsback (and summit beyond) we would be in deep snow and no longer on a groomed trail so we needed our crampons, helmets and ice axes.\nI was also able to switch off carrying the climbing rope to another climber so for the rest of the time my pack was 15 lbs lighter which made a considerable difference.\nWe had brought snowshoes for the climb, but after looking at the steps already dug for …","date":1651968000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651968000,"objectID":"7ed6fcc86a0c80225ce33b134bde58e1","permalink":"https://hrakaroo.com/post/summiting-hood-2022/","publishdate":"2022-05-08T00:00:00Z","relpermalink":"/post/summiting-hood-2022/","section":"post","summary":"Summiting Mt. Hood","tags":null,"title":"Summiting Mt. Hood 2022","type":"post"},{"authors":["Joshua Gerth"],"categories":["Software Development"],"content":"In defense of obscure names Naming things is hard As the joke goes\nThere are only two hard things in Computer Science: cache invalidation and naming things. – Phil Karlton\nand while this is funny (perhaps only to those in Computer Science) underlying the quote is a real issue, naming things is really hard.\nThe challenge is not just in giving something an appropriate name for right now, but trying to predict how they may evolve and be used in the future.\nMaybe you start with a database of bicycles, but as powered bicycles are introduced you start adding those but then it’s a slippery slope to electric motorcycles and then gas powered motorcycles. Pretty soon your database of bicycles includes all motorcycles and perhaps those three wheeled things I’ve seen driving on the freeway. Unless you had amazing forethought and were able to predict exactly how the industry was going to evolve chances are whatever name you select is going to be incorrect at some point in the future.\nRenaming isn’t always easy So, if the scope does evolve and the original name is no longer correct we should just rename it, right? Sometimes this is the answer. Tools for Computer Science have come a long way and doing a code refactoring is’t as hard as it once was. So if we have a variable name, function name, or even a class/object name that is no longer accurate we usually have the ability to safely rename it across all dependencies to a new and more appropriate name.\nBut the coding level is often where this capability ends. The industry has not yet developed the capability to reliability refactor service names across a distributed system and trying to do it manually is often fraught with errors that can greatly impact uptime.\nIn defense of the obscure So if changing the name of something is difficult and if naming things correctly now is hard, (and predicting how they may evolve is nearly impossible,) then maybe the best thing to do is to purposely give them obscure names.\nWhen I was in college we were able to select our own email addresses. Like most people knew I opted for the straightforward and used my last name for my address: gerth@lclark.edu. However, one of my classmates opted for something entirely different, she selected the email address of squidlips@lclark.edu. At first I thought she was just trying to rebel, but her reasoning was actually pretty interesting. Her name was something rather basic, (think Jane Doe) and her argument was that while doe@lclark.edu runs the risk of being mistaken for someone else, squidlips@lclark.edu is almost guaranteed not to.\nThis proved to be more than just an academic observation as it happened that I was not the only Gerth at Lewis \u0026amp; Clark College. There was one other one, my father, who was a tenured professor and I started to receive the occasional email intended for him. People had seen gerth@lclark.edu and had incorrectly assumed I was my father and were sending me information clearly not intended for the students. (Nothing salacious I’m sad to say).\nIn this case the name (my email address) was even 100% correct and it was still getting used incorrectly. And while while no one may have known who Squid Lips was, she never got any email not intended for her.\nObscure is better than wrong We make snap decisions all the time and if I was looking to get a list of vehicles for an endpoint and came across a service named bicycles I would immediately cross it off my list. But, if instead the service was named x34a5a or even horsetail I would at least have to consider it. I may first go looking for something more accurate, but at least I wouldn’t cross it off my list.\nI also prefer calling something horsetail rather than some obscure id designation as it’s much easier to remember horsetail and distinguish it from pigfoot than trying to remember a20b23 and distinguish it from c23s40.\nSo if a thing is going to exist for a while, likely evolve in scope, and changing it’s name is non trivial, then maybe giving it an obscure name may actually be better and ultimately easier than trying to come up with the perfect name. In some cases, naming things may not be all that hard after all.\n","date":1636243200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1636243200,"objectID":"e50717f6512d175ed2c7133bc8cb38ba","permalink":"https://hrakaroo.com/post/obscure-names/","publishdate":"2021-11-07T00:00:00Z","relpermalink":"/post/obscure-names/","section":"post","summary":"Obscure is better than incorrect","tags":null,"title":"In defense of obscure names","type":"post"},{"authors":["Joshua Gerth"],"categories":["Software Development"],"content":"Intuitively, read/write locks seem to be a perfect solution. They allow you to coordinate access to a resource and as long as the write operations are fast enough the read/write locks are basically free (or at least only as “expensive” as the time it takes to execute the write action.) The idea being that if multiple read routines use a read/write lock the only time they are blocked from execution is while the write routine holds the lock, but are otherwise totally unblocked.\nAs it turns out this is not necessarily true and read/write locks can end up being a lot more expensive than they initially appear.\nConsider the following:\nThread 1 requests read access to a shared read/write lock.\nAt this point in time no one else has requested the lock for either read or write access so a read lock is granted to Thread 1.\nThread 2 requests read access to the same read/write lock.\nSince the lock is currently only read locked by Thread 1, Thread 2 is also given read access.\nThread 3 requests write access to the same read/write lock.\nSince the lock has been locked for read access by both Thread 1 and Thread 2, Thread 3 is put on a wait list for write access until Thread 1 and Thread 2 release their read locks.\nThread 4 requests read access to the same read/write lock.\nWhat happens here?\nA first guess might be to give Thread 4 the read lock, along with Threads 1 and 2, since Thread 3 has not yet obtained the write lock, but lets consider the fall out if we let this happen. Imagine a system where every read operation took a minute to execute and requests are comming in every 30 seconds. If every read request is granted a read lock so long as no write thread had been given a write lock, new read requests would always come in before previous ones finished ensuring that the lock was never free (ie not read locked.) In this situation the write operation would be blocked from every achieving write access. aka, lock starvation.\nIn order to prevent lock starvation it is necessary that as soon as a write lock is requested every subsequent read lock request is blocked from obtaining their lock until the thread requesting the write lock has been given the write lock, executes, and then releases their lock.\nThis means that as soon as a write lock is requested any read threads currently running will block all new read requests. So a read/write lock is, worse case, as “expensive” as the time it takes to execute the write operation plus the worse case time it takes to execute a read operation.\nTherefore, even if you optimize your system so the write operations are as fast as possible, your overall throughput may still be dependent on your slowest running read operation.\nWhat read/write locks are good for. Read/Write are useful when you need a memory barrier and every thread on your service should only see the state of some memory either before or after a write operation but never but never both. Meaning that it is not allowable for some threads to see the value of the memory before the write operations and other threads running at the same time to see the memory value after the write operation.\nBut, as we saw above, this comes at a cost and in many cases it’s not really needed.\nFor example, suppose we have a data structure that holds the account balance for an individual. Suppose also that this account receives a constant stream of read requests that, for what ever reason, take several minutes to calculate. If we were to use a traditional read/write lock here then every time there is a deposit or withdrawal (a write operation) all read operations will be blocked until all running read operations finish and the write executes.\nAlthough the write operation may be quick, the long execution time on the read operation is going to cause the system to appear blocked while it waits for the write lock. But if we can tolerate concurrent threads seeing two different values then we can remove the block all together and achieve higher overall throughput.\nTo achieve this we first need to make the data structure immutable. Updates would instead be handled by the write thread copying the immutable data structure locally, modifying it (or modify on copy) and then using an atomic operation to swap in the new data structure.\nRead operations running against the old data structure would continue to run and would report the old value, while any new read operation would run over the new data structure and report the new value. Eventually all old read operations would finish and the only view would be of the new data structure, but for a time it would be possible for different threads to report different values.\nDestroying the old data structure can be handled either automatically by letting the garbage collector pick it up, or we can add read counters to objects which can tell us when an object is no longer being accessed and we can delete it manually.\nWe could also re-introduce a simple lock for just the writer operations to ensure that multiple write …","date":1636156800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1636156800,"objectID":"ab9b02ea830e6f16ec633bb17936f8cb","permalink":"https://hrakaroo.com/post/rw-locks/","publishdate":"2021-11-06T00:00:00Z","relpermalink":"/post/rw-locks/","section":"post","summary":"Read/Write locks are not the panacea they seem to be","tags":null,"title":"Avoiding Read/Write Locks","type":"post"},{"authors":["Joshua Gerth"],"categories":["Woodworking"],"content":"Background I’ve always wanted a small woodshop.\nWith both of my parents in theatre I spent a lot of my childhood in the shop they used for building sets. When we bought our first house I purchased a couple of woodworking tools, but my work area was in the garage which was shared with our cars. This made it hard to work on bigger projects and sawdust was always getting all over everything.\nOur second house had a three car garage which meant I finally had a dedicated space, but sawdust control was still an issue. Plus, it rains a lot where I live so dampness control was also an issue, especially as we went in and out of the garage.\nWhen the pandemic hit I suddenly found myself in desperate need of a project and decided to see if I could construct a wall between the main garage and the third bay to create a small, dedicated woodshop.\nThis is the before picture. Since the third bay was not isolated it often became just a dumping ground for things.\nMy first step was to take all the sheetrock off the post. Once I did that I was pretty much committed to the project. I knew I wanted to use the post to divide the wall in half, structurally at least, and I figured it would be better to work on the smaller half first, even though it was going to have a door in it which, at the time, I had no idea how to actually do.\nBut first, I had to put in the header and footer boards to attach the vertical 2x4s to.\nIn order to nail into the concrete I bought a hammer drill to drill anchor holes. This worked, but for the other half of the wall I borrowed a powder actuated nail gun from a friend of mine, which basically uses a 22 cartridge to shoot a nail into the concrete. Very loud, but much faster.\nOnce the header and footer were attached I started putting in the vertical 2x4s. I read up a lot on how to build a door frame with a king stud, jack stud and header plate.\nSatisfied with the framing I went on to do the other side, using a laser level to make sure the wall was straight.\nFor this side I wasn’t as lucky with the ceiling beams and they were parallel with the wall instead of perpendicular, as they had been for the first section. This meant that I had to climb up in the attic space and attach cross beams first before I could then attach the header boards.\nInsulation Initially I was not going to add insulation as I hate working with it. If you don’t cover up enough you can get thousands of tiny glass slivers that seem to take weeks to work their way out. But in the end I decided to add it, mostly because I was going to be running some power tools and wanted the extra sound insulation.\nI also added in some 20amp outlets and ran all the wiring, but ended up hiring an electrician to actually hook it into my electrical panel. I’ve added breakers to my panel before, but the whole thing scares the hell out of me and is not something I wanted to do again.\nI also installed a 240v 50amp circuit on the garage side for a future electric car plug in, and a 240v 30amp circuit on the shop side for my table saw.\nSheetrock I debated about installing the sheetrock myself or hiring out. Although I’ve done some small patch repairs, I haven’t actually done a full install before so this could be an opportunity to learn. That said, sheetrock is heavy and although I probably could have rigged up something to help me install it, it is much faster as a two person job. So in the end I just hired out for this part as well. We had temporary access to a truck so I was able to pick up the sheets myself and then two pros came in and got the whole thing installed and mudded in less than a week.\nPainting I did decide to paint it myself so I started with primer and was surprised at how much a new wall soaks in the primer. I went through way more than I was expecting.\nI also opted to not add any texture to the wall as most of the walls in the garage were already pretty flat and I would have had to hire out for the texture as well as I’ve heard it’s a trick to get right the first time.\nDoor I had never hung a door before, but it turned out easier than I was expecting. In the three years since I installed this I still haven’t had any issues with expansion or jamming.\nMoulding Next I attached most of the moulding. After going around the door I got busy with other projects and still, as of this writing, have not entirely finished the moulding. Seeing as how we are now modernizing the moulding in our house I may just wait and replace this with the new moulding as well.\nLights Adding lights was the last step. There was already a plug in the ceiling where a garage door opener could plug in, so I bought some led strip lights and plugged them in with a remote on/off switch. (Initially I was thinking I might actually wire up a switch, but in the end this was easier and cheaper.)\nThe led lights are fantastic and really do a great job of lighting up the woodshop. I have since pinned the wires to the ceiling so they are no longer dangling down like you see here.\nFinal …","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"c2f7bb2576aeb0ef2561702919ac2e6c","permalink":"https://hrakaroo.com/post/garage-wall/","publishdate":"2020-04-01T00:00:00Z","relpermalink":"/post/garage-wall/","section":"post","summary":"My pandemic project","tags":null,"title":"Creating a workshop in my garage","type":"post"},{"authors":["Joshua Gerth"],"categories":["Climbing"],"content":"Background In July 2019 my friend Tobin and I decided to hike the full Loowit loop trail around Mount St. Helens. Both of us are experienced hikers and in reasonable shape and figured we could probably complete about 10-14 miles a day. The total distance around the mountain is about 35 miles, so we figured it should take us approximately 3 days to hike. We also managed to secure two passes to climb to the top of St. Helens for Aug 2nd which extended our trip by one day.\nIn order to climb to the top of Mount St. Helens you need a permit, which can be difficult to obtain depending on when you want to climb. The summer permits often sell out very quickly so initially we assumed we would not be able to climb to the top. Even so, we signed up on a reseller web site and about a week before we were set to climb we were contacted by someone who had two extra passes as some people in their party backed out at the last moment. Further, the person lived in Seattle and was only a short distance from Tobin, so two days before we were set to leave Tobin drove to their house and bought the two passes from the seller. The guy was really nice and didn’t mark up the cost and just charged us the $20 or so per pass that he had paid.\nThe trip Where to start The first challenge was figuring out where to enter the Loowit trail and which direction to hike (clockwise or counter clockwise). Since there is only one trail up to the summit and our passes were for Aug 2nd we had a hard requirement of being near Monitor Ridge on the night of Aug 1st. Initially we thought we would enter at Sheep Canyon trailhead and hike clockwise on the trail. This would put us around Windy Pass on the first night and close to June Lake on the second night. (In retrospect this was probably not a great plan as Windy Pass isn’t named ironically. It is windy as hell and camping there would have been a trick.) However, the night before we were planning on leaving we realized the trailhead we were going to use had been washed out and we had to scramble to come up with a new plan.\nThe new plan was to park at the Windy Ridge trailhead and hike counter clockwise around the mountain. Tobin is from Seattle and I’m from Portland so we met at Spiffy’s at I-5 and Highway 12, stashed his car in a gravel parking near the 76 gas station and drove my car to the trailhead.\nSpiffy’s is a bit of a dive restaurant off I-5 but there were not a lot of other places around and we knew we wanted to get some take away sandwiches. I showed up first, walked in and started looking at the menu. While I was deciding, an older guy with a “get off my lawn” look to him walked in with a small lap dog in his arms. The hostess informed him that the dog would need to wait outside which caused him to get really upset and he demanded/yelled that it was a “therapy dog.” The hostess wasn’t having any of it and told him that he needed a permit or some sort of license if it was a therapy dog. At that point the guy yelled at the hostess “go fuck yourself you fucking whore” and stormed out. That was also the exact moment at which Tobin walked into the restaurant and only heard the insult as the guy stored out. We looked at each other and both cracked up laughing as it was such a bizarre way to start the trip. To her credit, the hostess handled it really well and the sandwiches were pretty good.\nThe trail head is at the end of NF-99, super easy to find and there is plenty of parking and a flush toilet bathroom. There are also some interesting informational signs that talk about the eruption and slow recovery of the area. We were a bit eager to get started so we didn’t linger too long. We ate the sandwiches we had picked up at Spiffy, sunscreened up and headed off.\nOur packs weighed around 24lbs and since Mount St. Helens is well known for not having much water each of us was also carrying close to three liters.\nDay 1 - 12.2 miles Starting For the first 1.7 miles the hike is along a winding gravel road. It’s blocked off from cars and well maintained, albeit not terribly interesting. At the end of the gravel road it’s still another 1.2 miles until you actually connect to the Loowit trail.\nAs we were hiking counter clockwise around the mountain we headed to the right and started on the Loowit trail. At this point the scenery looks sort of like rolling hills with the mountain in the distance. You can clearly see where the “blow out” was from the eruption but the walking is pretty easy.\nLoowit Falls Around a mile into the trail there is a turn out to go see Loowit Falls. It’s about 0.6 miles off the tail but well worth checking out. Although you can see the falls, you can’t actually get near it and even getting down to the water is a challenge.\nWe did meet up with a forest ranger just before we got to the turn off for the falls and chatted with him a bit. We asked the ranger if the waterfall was worth the extra hike (as we had a long ways that day). His answer was something like “yeah, it’s pretty good” …","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"0975794274034df9e4d30323b6c38901","permalink":"https://hrakaroo.com/post/summiting-st-helens-2019/","publishdate":"2020-04-01T00:00:00Z","relpermalink":"/post/summiting-st-helens-2019/","section":"post","summary":"Summiting Mount St. Helens in 3+1 Days","tags":null,"title":"Summiting Mount St. Helens in 3+1 Days","type":"post"},{"authors":["Joshua Gerth"],"categories":["Systems Administration"],"content":"Quick Background I volunteer as a Systems Administrator for a small medical clinic. They have a very slim IT budget so while their desktop systems are primarily Windows 11, I’ve configured most of their server infrastructure with Linux. A Proxmox server is used to manage their virtualized environment and I’m using Samba4 for their Active Directory Domain Controller.\nWhen I first set up Samba4 as their Active Directory I was able to use CentOS 6 with the Samba4 binary packages from SerNet. Although this has been working well enough, it has always been a little quirky and I had only ever set up a single Domain Controller. So recently I decided to upgrade their Domain Controllers to the newest version and add a second Domain Controller.\nInitially I tried to find the SerNet packages but it appears they have rebranded themselves as Samba+ and now charge a subscription fee for the binary packages. While I would love to support them, paying a subscription fee is not an option for this clinic.\nI’d really like to stick with CentOS as the server distribution as I have a lot of experience with it and have always found it to be a solid, minimial distribution. However, for reasons RedHat has decided that the Samba4 build that comes with Fedora should not include the ability to act as an Active Directory Domain Controller.\nI could build the sources from scratch and still use CentOS, but that would require installing all the build tools on each server and I’m trying to keep them as light as possible. Plus, building from scratch often introduces its own host of challenges and I really just want to set this up and move on to my next project. So instead I’m going to give a go at using Ubuntu, which I really like as a desktop system but have never been terribly thrilled with as a server system.\nFor setting this up I am mostly following the instructions from tecmint and specifically this one. However, these instructions were written for Ubuntu 16.04 so I’m making this post to document the steps I took in setting up Samba4 on an Ubuntu 18.04 system.\nNetworking overview For reference, the main gateway is a pfSense system set up at 10.0.1.1. This runs as the primary DNS and DHCP server for the network. The domain name I’ll use in these instructions is hrakaroo.lan.\nThe Active Directory domain is ad.hrakaroo.lan. I’ve specifically set this up so that Active Directory is on it’s own sub domain as I don’t want the rest of the server infrastructure to be dependent on Active Directory. I’d rather isolate Active Directory to its own area.\nCreating a new system in Proxmox In Proxmox I’ve created the following new host\nHostname: adc1 Memory: 2 G Disk: 32 G Processors: 1 Cores: 2 In retrospect (by looking at the usage charts in Proxmox) it looks like I could have cut the memory, disk and cores in half and it would have been fine, but I’m going to leave it as is for now.\nOnce the vm is created, start the server.\nMost of the installation is pretty straightforward so I’m only going to highlight when I didn’t select the default.\nInstaller update available\nDuring the install it suggests that an update to the installer is available and asks if you want to update. I’m not sure if it matters much, but I said yes.\nNetworking\nEdit the IPv4 configuration and select Manual\nSubnet: 10.0.1.0/24 Address: 10.0.1.25 Gateway: 10.0.1.1 Name servers: 10.0.1.26 Search domains: ad.hrakaroo.lan 10.0.1.26 is the name servers for the existing Active Directory Domain Controller. Once the system is fully configured I’ll change this, but it makes the initial setup much easier if this points at your existing Domain Controller.\nProfile Setup\nThis is the first thing I don’t like about Ubuntu. I’d rather just have a password set for the root account. I get the reason why they are doing this, but for a super small setup this is more of an annoyance than a help. Sadly you also can’t use general accounts like ‘admin’ or ‘staff’ either. So I ended up creating a personal account for Joshua Gerth. (This turned out to be a bit of a mistake, more on this can be found in the additional things at the bottom.)\nSSH Setup\n[X] Enable install the OpenSSH server.\nBasic Server Configuration For almost all of these commands I find it easier to work by ssh’ing into the box rather than using the Proxmox console as copy/paste and editing all work better.\nUpdate and install emacs Okay, once the server is up and running I always run the update commands to make sure everything is up to date:\n$ sudo apt update $ sudo apt upgrade $ sudo apt dist-upgrade and also, because vi is terrible I always install emacs:\n$ sudo apt install -y emacs Turn off IPv6 This may not be necessary, but I find that debugging things when only IPv4 is enabled to be a lot easier. The environment I’m installing this in is small enough that we are not at risk of running out of IP numbers any time soon and since everything gets NAT’ed anyhow I don’t really see a need to enable IPv6.\nThat said, this is the second thing that …","date":1585267200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585267200,"objectID":"cd42dc798bb7bc3eb4cf7edcf59b9d57","permalink":"https://hrakaroo.com/post/samba4-ubuntu18.04/","publishdate":"2020-03-27T00:00:00Z","relpermalink":"/post/samba4-ubuntu18.04/","section":"post","summary":"Building a Active Directory Domain Controller on Ubuntu 18.04","tags":null,"title":"Samba4 Domain Controller on Ubuntu 18.04","type":"post"},{"authors":null,"categories":null,"content":"","date":1583020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583020800,"objectID":"a1d88ba95f4ee37230d193ff634c3af2","permalink":"https://hrakaroo.com/project/fractal-rust/","publishdate":"2020-03-01T00:00:00Z","relpermalink":"/project/fractal-rust/","section":"project","summary":"A simple fractal image generator in rust","tags":["Rust","Fractal"],"title":"Fractal Rust","type":"project"},{"authors":null,"categories":null,"content":"","date":1577318400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577318400,"objectID":"205809978e4f76dbca8782c4b4078d43","permalink":"https://hrakaroo.com/project/glob-library-java/","publishdate":"2019-12-26T00:00:00Z","relpermalink":"/project/glob-library-java/","section":"project","summary":"Fast lightweight glob library for Java","tags":["Java"],"title":"Glob Library for Java","type":"project"},{"authors":null,"categories":null,"content":"","date":1574294400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574294400,"objectID":"a6f33e008b6ed177f57f831de4c78002","permalink":"https://hrakaroo.com/project/ray-the-tracer/","publishdate":"2019-11-21T00:00:00Z","relpermalink":"/project/ray-the-tracer/","section":"project","summary":"A Ray Tracer in Go","tags":["Go","RayTracer"],"title":"Ray the Tracer","type":"project"},{"authors":["Joshua Gerth"],"categories":["Software Development"],"content":"This is my second post on things I’m finding interesting about the Go language. For additional background on this series you might want to read Part 1.\nDependency Management This time I’m going to focus on dependency management and how go approaches the diamond dependency issue.\nFirst off, Go does not support pre-compiled libraries the way Java does. (Personally, I think compiled Jar files are from a by-gone time and these days cause more harm than good, but that’s not why Go doesn’t have them.) Go doesn’t have them because Go code compiles down into native assembly so it would be impossible to distribute anything precompiled by Go and expect it to work on more than one platform.\nSo instead, Go publishes libraries as source code with Git tags and avoids artifactory all together. When you want to use a library you create a dependency on a git repo with a specific tag version.\nThis doesn’t exactly remove the diamond dependency issue as it is entirely possible to have a transitive dependency on two different versions of a library. In this case, as with Java, you still have to select the version you want to use. However, there are two substantial changes.\nCan’t ignore the problem First, you don’t have the option of ignoring or miss the issue. This means that if your service builds in Go, you can be confident your code does not contain any “hidden” mismatch errors. This effectively removes an entire class of errors that you have with Java. (TBH, these don’t pop up too often, but the more common a library is the greater the chance for this to happen. I’ve seen this error triggered with the Guava libraries.) Being able to completely remove them as a class of problems would be nice.\nConflicts identified at the source code level Second, conflicts are identified at the source code level and not at the version level. This means that PATCH version mismatches won’t break your build so long as they don’t change function signature (and PATCHES really shouldn’t).\nI’m not saying that the way Go deals with this is perfect but it does move the problem into a first class issue and forces a resolution. Java could take this same approach if you copied all of your dependencies into your code base as source code. But I did find it as an interesting consequence on how Go handles dependency management.\n","date":1569888000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569888000,"objectID":"0c4d4b09f635dc5d5e6c115df51b76b6","permalink":"https://hrakaroo.com/post/go-for-java-part2/","publishdate":"2019-10-01T00:00:00Z","relpermalink":"/post/go-for-java-part2/","section":"post","summary":"Go's approach to the diamond dependency problem","tags":null,"title":"Go for Java Developers - Part 2","type":"post"},{"authors":["Joshua Gerth"],"categories":["Software Development"],"content":"For the last 20+ years I’ve been mostly focused on Java development. But recently I had an opportunity to join a team which was focused on Go and having spent the early part of my career writing C++ I was intrigued by some of the decisions Go made. So this is the first (of possibly several) posts on things I found interesting about the language and since my I have been doing mostly Java development I’m going to be comparing and contrasting from that perspective.\nGo interfaces For this first post I’m going to discuss one specific implication of how Go handles interfaces.\nIf you are unfamiliar with Go, it uses structural typing for interfaces (which is more generally called “duck typing” meaning “if it walks like a duck and talks like a duck … it’s a duck.”) This means that if a struct in Go has functions on it which match the methods of an interface, instances of that struct are types of that interface. This sounds more complicated than it actually is so lets look at a quick example:\nSuppose you wanted to create a Person class and a Named interface in Java, that might look like:\ninterface Named { String getName(); } class Person implements Named { String name; String getName() { return name; } } Pretty straight forward. Now, if we wanted to do a similar thing in Go it would probably look something like:\ntype Named interface { getName() string } type Person struct { name string } func (p Person) getName() string { return p.name } Ignoring the syntax differences, what is interesting is that in Go we don’t declare Person as implementing Named. This is implied by the function on Person matching the method in the Named interface. The compiler figures this out for us and instances of a Person are automatically of type Named.\nSo while this isn’t necessarily a new thing (Python mostly lets you do the same thing), this was something new for a statically typed language.\nWhen I first saw this I thought “meh, so you can leave off the ‘implements’ keyword, whatever.” But I think this feature has a really interesting implication.\nThe setup Back in Java land, let’s suppose you have a function that takes an SQL PreparedStatement as one of its arguments. Something like:\nclass Db { void setValue(PreparedStatement stmt, String value) { stmt.setString(1, value); } } You might use this like:\nPreparedStatement stmt = conn.prepareStatement(\u0026#34;SELECT …\u0026#34;); Db db = new Db(); db.setValue(stmt, \u0026#34;someValue\u0026#34;); Writing a unit test for this would probably look something like:\nclass DbTest { @Test public void setValueTest() { Db db = new Db(); PreparedStatement stmt = ?? db.setValue(stmt, \u0026#34;dog\u0026#34;); // todo - verify the statement received the value of \u0026#34;dog\u0026#34; } } The challenge is creating the test PreparedStatement. You could use one of the mocking frameworks in Java (Mockito, PowerMock, …) to mock the PreparedStatement and test that setValue is called with the value “dog”. While this does work, most/all of the mocking frameworks are basically a nice user interface over a rats nest of reflection calls. (Used incorrectly reflection is a tool to move compile time errors back to the runtime.) However, it is also possible to test this without using a mocking framework by building our own class which implements PreparedStatement:\nclass TestPreparedStatement implements PreparedStatement { String value; void setString(int parameterIndex, String x) { this.value = x; } ... } An instance of our TestPreparedStatement can now be passed into our setValue method and we can later verify that the internal ‘value’ is set to “dog”.\nAhhh … but there is a devil hidden in these details. PreparedStatement is a massive interface with well over 50 methods. In order to stub out the one method you want (setString) you are going to need to also stub out all of the other ones as well. We don’t ever use them so they can all throw a RuntimeException (and thankfully most modern IDEs can automatically generate this code for you) … but you are still dealing with a lot of boilerplate code.\nThe switch Now let’s take a look at this same problem in Go land. (For the sake of argument let’s assume that PreparedStatement both exists in Go and works much in the same way as its Java counterpart).\ntype Db struct { } func (db Db) setValue(stmt PreparedStatement, value string) { stmt.setString(1, value) } And again it is used like:\nstmt := conn.prepareStatement(\u0026#34;SELECT …\u0026#34;) db := Db{} db.setValue(stmt, \u0026#34;someValue\u0026#34;) Now let’s write the unit test:\nfunc SetValueTest(t* testing.T) { db := Db{} stmt := ?? db.setValue(stmt, \u0026#34;dog\u0026#34;) // todo - verify the statement received the value of \u0026#39;dog } We’ve once again hit the same issue. As with Java, we can use the Go’s mock framework (which also uses reflection) or, as before, we can try to roll our own.\nApproaching it directly we could build out a TestPreparedStatement as:\ntype TestPreparedStatement struct { value string } func (tps TestPreparedStatement) setString(parameterIndex int, x string) { tps.value = x } But then we are going to have the same issue …","date":1564617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564617600,"objectID":"38c67d5b1ec54e2fc1dffc982f0a535d","permalink":"https://hrakaroo.com/post/go-for-java-part1/","publishdate":"2019-08-01T00:00:00Z","relpermalink":"/post/go-for-java-part1/","section":"post","summary":"Cool tricks with Go interfaces","tags":null,"title":"Go for Java Developers - Part 1","type":"post"},{"authors":["Joshua Gerth"],"categories":["Software Development","API"],"content":"The following is blog post that was written from a speech I presented about questions to consider when writing an API.\nWriting a functional API is relatively easy, but writing a good one that’s functional and empowers your users takes planning and patience. Designing a good API is about creating a sense of clarity and simplicity—it’s the bridge between your intention and your users.\nLike most software development, building an API is a creative process; it’s impossible to completely define a hard-and-fast set of rules that will work in all cases. Nevertheless, three key questions—derived from what I consider the key characteristics of a good API—can serve you well as functional guideposts as you design and write your API:\nIs your API’s usage discoverable? Is your API composable? Is your API safe to use? Let’s take a closer look at each question.\nIs your API’s usage discoverable? In his famous book, The Design of Everyday Things, Don Norman coined the term discoverability. “When we interact with a product,” Norman wrote, “we need to figure out how to work it. This means discovering what it does, how it works, and what operations are possible.”\nTake doors, for example: We interact with these standard physical objects every day. Often, based on the presence of affordances like knobs, handles, and push bars, it’s pretty clear how to open or close a door. But on occasion, a door’s design will suggest the opposite of how it actually works, and, as a result, we require instructions before we can properly use it. Just think of how many times you pulled a handle that actually needed to be pushed.\nWhen we use a door the wrong way, we feel silly and stupid, but it’s not our fault. Actually it’s the design that’s bad.\nSomething similar can happen with a poorly designed API.\nConsider the last API you used. How did you learn to use it? Did you read all the documentation first, or did you just jump right in? Maybe you weren’t sure about all of the parameters, so you sent in null for a few values and guessed at others. Did the API throw an error message when you did something wrong, or did it fail silently without any feedback? Did the error message clearly define which parameters were optional and which were not? Did you just keep plugging away until you got it right?\nThis is how most users will learn your API.\nYour users are going to learn just enough to bootstrap themselves, and then they’ll figure the rest out as they go. With this fact in mind, you can help them along the away by increasing your API’s discoverability. You can do this through documentation; adhering to conceptual models; and using concise, symmetrical language.\nAssume your users won’t read the documentation—until they need to Just because your users won’t read your documentation doesn’t mean that you don’t need to provide it. You definitely do. But don’t design your API with the assumption that everyone will read the docs before they use it.\nSome users would rather experiment than look up an answer in the docs. Every time I use Java’s substring() method, for example, I can never remember if the second value is an offset or a length, so I just write a little program to try it out both ways. This is usually quicker for me, and more fun, than looking up the answer.\nIn many cases, users who’ve learned to distrust documentation won’t read the docs anyway, at least not until they get desperate. Documentation is notorious for being out of date or just wrong. Now, this obviously isn’t true of all documentation, but think of how many times you’ve consulted documentation—or a help system or knowledge base—and found that either it provided answers that were totally useless, or it didn’t provide any related answers at all. Plenty of documentation does a poor job of anticipating the questions users might ask or how they might ask them. Additionally, even if users have a sense of what task they want to achieve, they may lack the exact vocabulary or use different terms for that task than the docs, which can make searching difficult.\nYou should also provide plenty of examples in your documentation—because users want them. Typically, examples are the first things users look for when learning a new API. Only after they gain a little context will they go look at the rest of the documentation. Examples are how users come to understand your API as a whole.\nCreate a conceptual model of how your API works Don Norman explains that a conceptual model is “an explanation, usually highly simplified, of how something works.” Conceptual models are not schematics, and they should relate to other known conceptual models.\nA good example of a conceptual model is the file system structure used on personal computers. File systems, like those on Mac and Windows operating systems, were intentionally based on the concept of files and folders that we were already familiar with in the physical world. This made it easy for non-technical users to understand and discover how to copy, store, and …","date":1559779200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559779200,"objectID":"53f7774c155e4ba6eaf527864d19f25e","permalink":"https://hrakaroo.com/post/three-questions/","publishdate":"2019-06-06T00:00:00Z","relpermalink":"/post/three-questions/","section":"post","summary":"The following is blog post that was written from a speech I presented about questions to consider when writing an API.\nWriting a functional API is relatively easy, but writing a good one that’s functional and empowers your users takes planning and patience.","tags":null,"title":"Three Questions to Ask When Writing a New API","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Hugo Blox Builder Hugo Blox Builder | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://hrakaroo.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Hugo Blox Builder's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Joshua Gerth"],"categories":["Software Development","API"],"content":"A long time ago… In 1974 the first relational database was created and along with it a new user interface language was developed to make it easy to query the data. This language (or rather sub-language) was called Structured English Query Language or SEQUEL. SEQUEL would later evolved into SQL and become the preeminent language for querying relational databases. In the 45+ years since it’s introduction SQL has evolved slightly but it is still largely similar to the version introduced in the 70s. What has changed during that time is how we interact with the database. Today, SQL is used significantly more by applications querying the database than by end users. This usage pattern has created its own ecosystem of utilities and libraries which help applications build SQL queries. One of the more popular libraries for building SQL queries in Java is Hibernate’s Criteria Builder which uses an annotation pre-processor and a builder pattern to facilitate building SQL queries. (Java’s Persistence API was based heavily on Hibernate’s Criteria Builder). But, at the end of the day the builder still generates a basic SQL string which is sent to the target database, parsed and then executed. Hibernate is just one example, but there are hundreds of other libraries that exist across various languages which all seek to provide the same basic functionality. To provide an API which abstracts away the actual building of an SQL query.\nSo why do these all tools exist? Is an SQL query so complicated to construct that we need libraries and utilities to help us? In general, no, most SQL queries are relatively straightforward to construct. The problem is that SQL was designed for humans and not computers. The inclusion of the word ‘English’ in the original name was not by chance, SQL was intended to be similar enough to English that it would be self descriptive and would only require minimal transformation from the spoken question to the actual query. SQL was not written to make querying easy from other applications. In order to query a database from an application, the application needs to build the SQL query programmatically at run time, which means that all errors in the SQL query string are also going to be discovered at run time.\nAn Impedance Mismatch Compiled languages offer an enormous advantage over interpreted languages in that you can be confident that, if the application compiles, then it does not contain any syntax errors. This assurance removes an entire class of errors that exist in pure scripting languages. Yet, by having an application generate SQL you are re-introducing the possibility of a run time syntax error. Furthermore, the errors which do get introduced are almost always related to the construction of the SQL query rather than actual column names or keywords in the query. Meaning the column names and keywords are not as likely to be the source of syntax errors as they don’t normally change based on the user request. For example, an application which allows the searching of available flights is less likely to return different a type of data depending on the destination city. You may get back more or less result, but it will usually be the same basic set of information. Syntax errors around the column names and keywords are often found through basic testing and fixed.\nThe more common (and harder to find) syntax errors are introduced in the construction of the query itself.\nDid you remember a space after the ‘SELECT’ and ‘FROM’ keywords? Did you join your select fields with a comma, but remember to not include a comma after the last one? If this is the first filter then we need to add the ‘WHERE’ keyword, but if this is the second one we need to add the ‘AND’ keyword, and don’t forget about the parentheses. These types of syntax errors are often introduced based on the users search criteria and can be significantly more difficult to find with basic testing due to the sheer number of permutations. This is the real advantage of using a helper library like Hibernate Criteria Builder. They provide an assurance that if you use their libraries, the generated SQL will be free of construction syntax errors. This assurance is most often achieved through massive test coverage and a responsive development team which quickly patches any errors that are found. It would be safe to say that in the 45+ years since the introduction of SQL, millions of lines of code have been written in various languages, all attempting to work around this same basic problem. It’s a huge waste of intellectual effort for what is essentially a self inflicted problem.\nWhere to go from here SQL and similar English based DSLs (domain specific languages) are immensely powerful for building complex queries quickly. As an end user, nothing is more frustrating than trying to build a complex search criteria through a form based UI. First enter the subject, then select the predicate, then enter the object, then click the plus sign to add another filter, …","date":1541030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541030400,"objectID":"8b858f9d008b5104e96396c1ce8df0c3","permalink":"https://hrakaroo.com/post/sql-terrible-api/","publishdate":"2018-11-01T00:00:00Z","relpermalink":"/post/sql-terrible-api/","section":"post","summary":"SQL was designed for humans, not computers","tags":null,"title":"SQL is a terrible API","type":"post"},{"authors":["Joshua Gerth"],"categories":["Development Process","Teams"],"content":"The following is a blog post that was written from a speech I gave about how to set the ground rules for code reviews.\nFollowing New Relic’s Project Upscale—an innovative reorganization intended to make our development teams more autonomous—the engineering organization formed several new teams, one of which was the New Relic Database (NRDB) team. As the name implies, the NRDB team is responsible for the development of our events database, which powers the New Relic Insights tool as well as several other products.\nWhen we formed the NRDB team, it included several senior-level software engineers. This was a highly skilled and very passionate group of developers reviewing one another’s pull requests.\nWhen passion turns toxic Being passionate about your work is one of New Relic’s core values. In this case, however, we may have experienced too much of a good thing: our code reviews soon became collision points, and we increasingly turned to passive-aggressive communications to settle our differences.\nIn the example on the left, the reviewer left the PR in an in-between state. They didn’t explicitly reject it, but they didn’t approve it either. In the example on the right, the reviewer made a highly subjective request, and the author just made the change, but from their tone you can kind of guess that they didn’t appreciate the feedback.\nAs a result, the NRDB team’s developers grew increasingly frustrated, team trust eroded, and several members (myself included) contemplated switching to other teams. We were in trouble.\nRefining our process—and saving the team We decided as a team to take a step back; we resolved to figure out what was going on, why it was happening, and what we could do to fix it. Since most of our frustration was tied to our code reviews, we started by asking a simple question: how could we give one another more effective and constructive feedback?\nWe answered the question by developing four basic guidelines for code reviews. We think you’ll find them useful, too, but before we spell them out, we want to share the full story behind what happened to divide our team and what was really as stake for us.\nA flawed approach to the code review process Many of our challenges were related to the differences between objective and subjective feedback in our code reviews. Being able to differentiate clearly between these two types of feedback can be critical to the success of a code review, and to the effectiveness of a development team. In too many cases, we weren’t handling subjective feedback in a constructive manner—in fact, just the opposite was true.\nWe probably aren’t the only ones who struggle with this issue. Many developers are trained from the start to downplay differences between the two types of feedback. In fact, students in academic software engineering programs rarely learn how to give or receive critical feedback of any sort.\nWhen I went to school, this certainly was the case. The computer science curriculum focused on algorithm analysis, data modeling, and problem solving. Our instructors treated code review as a functional quality-assurance task; they rarely presented it as a creative process. Code review feedback tended to be straightforward: The code either worked, or it didn’t. Because of this kind of training—or rather, lack of training— many software engineers still treat all aspects of code reviews as completely objective activities.\nIt’s useful to contrast this approach with the one employed in an academic creative writing program. There, instructors conduct workshops that include training on how to give critical feedback. Creative writing instructors understand that giving and receiving critical feedback is an essential part of the creative process. They also understand, however, that critical feedback can be harmful and create resentment unless it is handled properly. The goal is to provide feedback in a positive and constructive way that helps to hone a writer’s ideas, enhance their creativity, and leave both parties enriched by the process.\nThe struggle over subjectivity Many facets of a code review, however, are not straightforward. In particular, there are issues that demand subjective assessments for which there are no “correct” answers. This is where the rigid emphasis on code review as a totally objective activity, and the failure to consider the creative nature of software development, can become a problem.\nMany elements of a modern code review process are now fully automated. Editors and IDEs will find syntax errors, evaluate Boolean logic, and warn about infinite loops. As a result, the bugs that survive are much harder to find, especially when you’re at the end of the process and are just looking at a code snippet with limited context.\nEditors and IDEs, however, can’t detect—or prevent developers from focusing on—subjective issues such as confusing method names, questionable style preferences, and bad variable formatting. And when we dislike and disagree with what we …","date":1539043200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539043200,"objectID":"5261e3eded1eedf0533e0a4867fc20f2","permalink":"https://hrakaroo.com/post/code-reviews/","publishdate":"2018-10-09T00:00:00Z","relpermalink":"/post/code-reviews/","section":"post","summary":"The following is a blog post that was written from a speech I gave about how to set the ground rules for code reviews.\nFollowing New Relic’s Project Upscale—an innovative reorganization intended to make our development teams more autonomous—the engineering organization formed several new teams, one of which was the New Relic Database (NRDB) team.","tags":null,"title":"Creating Simple and Effective Guidelines for Code Reviews","type":"post"},{"authors":["Joshua Gerth"],"categories":["Software Development","Java"],"content":"Java’s dependency management suffers from the dreaded diamond dependency issue. And while this issue is not unique to Java, it is, perhaps, more acute due to the precompiled nature of Java’s Jar files.\nA Quick Refresher If you are unfamiliar with this issue, here is a quick refresher:\nSuppose there exists a library which contains a useful method that takes a string as its parameter:\nclass Common { void helpful(String a) { ... } } This library is published to an artifactory as\ncom.hrakaroo : common : 1.0 Now, suppose there exists two other libraries which both use this helpful method\nclass Dog { void method1() { Common c = new Common(); c.helpful(\u0026#34;dog\u0026#34;); } } and\nclass Cat { void method2() { Common c = new Common(); c.helpful(\u0026#34;cat\u0026#34;); } } Each of these are also published to artifactory as:\ncom.hrakaroo : dog : 1.0 com.hrakaroo : cat : 1.0 And each of these have a transitive dependency on Common. Okay, now you decide to build your service which uses Dog and Cat so your dependency tree looks like\ncom.hrakaroo : dog : 1.0 com.hrakaroo : common : 1.0 com.hrakaroo : cat : 1.0 com.hrakaroo : common : 1.0 All is good. But now the folks who created Common come out with a new version which changes the signature of helpful and adds a boolean flag. So the new version looks like\nclass Common { void helpful(String a, boolean flag) { ... } } And knowing they are going to break some things publish this under a new version in artifactory\ncom.hrakaroo : common : 2.0 The folks who made the Cat library realize this new flag will fix a bug they have had so they update to it as\nclass Cat { void method2() { Common c = new Common(); c.helpful(\u0026#34;cat\u0026#34;, true); } } And publish it under\ncom.hrakaroo : cat : 2.0 But the Dog library makers don’t need the new functionality so they don’t bother to update.\nAnd finally, you decide to update your service to use the newest version of Cat which has the bug fix you need. This changes your dependency tree to:\ncom.hrakaroo : dog : 1.0 com.hrakaroo : common : 1.0 com.hrakaroo : cat : 2.0 com.hrakaroo : common : 2.0 In Java 8 you can not bring in the same dependency more than once with different versions. There are two common ways to deal with this, and they are both wrong.\nFirst, you can not do anything. (This is probably the most popular solution.) In this situation gradle will pick one (usually the latest version) and use that as its version. In this case it will select com.hrakaroo : common : 2.0 which means that when your service calls Dog.method1 it will give you a runtime exception as the JVM will be unable to find the definition for helpful(String).\nOr, if you are using gradle, you can use it’s force tag and force the version down to com.hrakaroo : common : 2.0 which means that when your service calls Cat.method2 it will give you a runtime exception as the JVM will be unable to find the definition for helpful(String, boolean)\nThe only “correct” solution here is to use gradle’s failOnVersionConfict() which will fail to compile your project unless both your dog and cat dependencies use the same version. This means you will be forced to fix the issue before your project can compile, but this may not be practical as a large project has lots of moving parts and compatible versions may not be available. Additionally, failOnVersionConflict() doesn’t understand semantic versioning so it will fail on PATCH level differences which often makes this a very painful and non-practical solution.\nMost people just choose to go with the plug-and-pray approach where they just hope they never call a code path which encounters a definition which doesn’t exist.\nCutting the knot As the two easy solutions are wrong and the one correct solution is impratical, the only real answer here is to avoid the problem altogether. When building a library, limit your dependencies.\nBuilding a service requires a different approach from building a shared library. From the technologies you use to the way you version and test it are substantially different. Services are often just thin wiring together of different frameworks and libraries while libraries are more single tasked. And yet, they too often I don’t see people appreciate this difference. Instead they hack together libraries like they do services.\nStick to vanilla Java I really like the Kotlin language, but I don’t think it has a place (yet) in shared libraries. Part of what makes Kotlin fun are all of the extension and infix libraries which are all packaged in the kotlin stdlib dependency. Any time you have more than two kotlin library dependencies you are just about assured to have a version conflict on the kotlin stdlib. Libraries should be written in Java to remove as many dependencies as possible.\nAvoid huge common or utility libraries Apache’s commons-lang3 is a fantastic library, but too often I’ve seen brought in so that the developer can use the StringUtils.join() method. Not only is this method trivial to write, but with Java 8 this can be done directly off the stream …","date":1527811200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1527811200,"objectID":"a0e358f5affd08037816053c726d50d9","permalink":"https://hrakaroo.com/post/sane-java-dependency-management/","publishdate":"2018-06-01T00:00:00Z","relpermalink":"/post/sane-java-dependency-management/","section":"post","summary":"An approach to Java's dependency management problem","tags":null,"title":"Trying to solve Java's Gordian Knot","type":"post"},{"authors":["Joshua Gerth"],"categories":["Toastmasters"],"content":"The following is the speech I wrote for the Humorous Speaking Contest for Toastmasters. I placed first for the Division award but had to back out of competing at the Area level due to a travel conflict.\nThis speech is intended to be performed so it is not a formal writing.\nMy wife, who usually took our 10 year old daughter to her dance recitals, had been asked to speak at a conference that coincided with a recital, so I was tasked with taking our daughter instead. While this might stress out some fathers, it so happened that I was an experience dancer dad. My work schedule was very flexible so I had become primarily responsible for taking our daughter to her dance classes. I had spent hours at the dance studio and I’d seen it all. From temper tantrums, to crying and yelling and throwing things… and that was just the moms. I wasn’t worried in the least.\nMy first task was to take her to get her makeup for the recital. “Black eyeliner, red lipstick.” That seemed straightforward, but when we got to the makeup counter we found out there isn’t just one black eyeliner. There’s regular black, black out, onyx black, darkest black, ferocious black and blackest black, just to name a few. I must not be the most color aware person as all the different shades of black looked pretty similar to me. There were also water proof versions of everything which I ruled out instantly as we were certainly not going swimming. So we eventually narrowed it down to darkest black and blackest black, which seems like an absurd differentiation. I don’t know how you get to darkest without also being the blackest but far be it from me to question a multi-billion dollar industry. After much back and forth we finally settled on blackest black as we figured that way no one could complain it wasn’t black enough. The lipstick was a bit easier as the instructions had included a specific shade number.\nHowever, it wasn’t until the day of the recital that I realized neither my daughter nor I had ever actually applied either eyeliner or lipstick. These days you could probably find an instruction video on-line, but this was pre-YouTube days. We decided to tackle the eyeliner first. For those that don’t know, an eyeliner pencil is essentially a sharpened stick which you need to get really close to the eye. The entire concept seems barbaric and on my first attempt I couldn’t bring myself to actually get right up next to her eye. This left her with a ring around her eye. Knowing this wasn’t quite correct I tried to fix it by coloring from the edge of the ring closer in towards her eye. Although in theory this worked, the end result was far more goth than I had intended.\nThe lipstick proved to be almost as challenging as the eyeliner, although less dangerous. To me, lipstick seems like a sticky crayon and your lips have a natural line on them that separates them from the rest of your face, so I figured if I just colored in between the lines I would be good to go. What I didn’t account for was that there is no natural stopping point inside your mouth and I spent a good while in front of the mirror making various lip poses trying to get a sense of how far in I should color.\n“Dad!”\nNone of this was sitting well with my daughter who was becoming more and more panicked with each facial gesture. After deciding on a general plan I proceeded to put on the lipstick much like you would color in a coloring book, with rapid back-and-forth type motion. Again, although in theory this worked it left her with a very thick layer of lipstick on her lips.\nStill, with the makeup done we rushed off to the dance recital. I got her checked in and took my seat in the audience.\nThe recital started normally but it didn’t take long before the hot overhead lights, heavy costumes and general physical activity started to take their toll. Like most of the dancers, my daughter started to sweat … heavily. This is apparently what waterproof eyeliner is for. Without it the sweat mixed with the thick ring I had applied and proceeded to run down her cheeks, giving her an Alice Cooper look. Meanwhile, the lipstick I had applied in her mouth had been rubbing against her teeth turning them a frightening shade of red and causing her smile to take on a menacing grimace. This added new meaning to the dance as it appeared my daughter was melting into a nightmarish black swan, threatening to eat the other dancers.\nStuck in the audience I could only watch with mounting horror as the thick layer of lipstick started to work itself outside her lips and smear around her face. My first thought was “my wife is going to kill me.”\nThankfully some of the other moms took pity on her and tried to clean her up between routines. When my wife returned and saw the recital photos she decided that she would never miss another dance recital again. My daughter recovered but has learned that dad is not who you go to for makeup advice. Still, whenever my kids ask me if they should wear the blue outfit or the black one, I …","date":1506816000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506816000,"objectID":"67fabd34e881ed36b32cff0c521f45f5","permalink":"https://hrakaroo.com/post/the-dance-recital/","publishdate":"2017-10-01T00:00:00Z","relpermalink":"/post/the-dance-recital/","section":"post","summary":"Award winning speech for the Toastmasters Humorous Speaking Contest","tags":null,"title":"The Dance Recital","type":"post"},{"authors":["Joshua Gerth"],"categories":["Development Process","Teams"],"content":"In the traditional standup format everyone stands in a circle and each person, in order, gives an update. The updates follow the Agile format:\nWhat they did yesterday What their plans are for today Are there any blockers I have a number of problems with this format.\nContext Switching People don’t usually stand in any particular order so the updates from person to person often jump between the project(s) the team is working on and hero tasks. Additionally, if we’ve sized our tasks correctly often what one person is working from day to day changes. This makes sense to the person giving the update, but for everyone else, trying to track actual progress becomes increasingly difficult.\nProject Status Related to context switching, it’s nearly impossible tell the overall project status from this type of update. Even if you could figure out how many tickets were closed, without looking at the kanban board it’s impossible to get even a sense of how far along the project is. Plus, this format does nothing to encourage people to actually update the kanban board, compounding the issue.\nPublic Speaking Public speaking does not come naturally to everyone, even when presenting just to the team. I’m much more relaxed with it now, but there was a time when this type of setting would cause me enough stress and I would ignore whatever was being said and just rehearse what I was going to say. Then, after I gave my update, I would spend rest of the standup obsessing over the things I had messed up or forgotten to say.\nCompetition for Busiest Without focus, the standup can become a passive competition for who is the busiest person.\nI’ve got a meeting with a customer today to talk over a feature they want added. Well I’ve got two meetings today to talk over features. I’ve pretty much got meetings all day long so I’m not likely going to get much else done. It sounds silly, but it’s something I’ve seen happen a lot at multiple companies, especially if people are feeling insecure (imposter syndrome). It can take the form of lamenting (but really bragging) about the number of meetings, or making the tasks you completed sound like herculean efforts. It’s pointless and unhealthy for the team.\nForced Update Finally, it forces everyone to talk when they may not want to. There have been times in my career where my personal life has taken over and I’ve needed to take some time off. Be it medical or family related. At the update I don’t want to go into details about what I’m dealing with. In fact, I may be at work specifically to take a break from the other stresses going on. Perhaps I took off work yesterday and I may have to leave early today to take care of a personal issue, but now I’m in an unconformable position of either saying “I have no update” or, worse, explain that “I’ve got some things going on which I don’t want to talk about.”\nAs an individual contributor I find this standup format stressful and as a project lead and manager I find it unhelpful. Instead I prefer using the standup time to walk the kanban board.\nWalking the board With a Jira you can use swim planes to split up your kanban board into project tasks and hero tasks. Then starting at the Done column, just go down each column and each owner gives an update for their task. In this format there is no initial awkward moment trying to figure out who should go first. The context switching is much less and the team can focus on what is being said instead of trying to memorize what they are going to say.\nSince Done is often an end state and you don’t necessarily want to re-walk this entire list every time you can either cut a Jira release after each standup, or create a Closed column and use the standup as an opportunity to move tasks from Closed to Done.\nClosing comments One critique of this format is that it is possible for a team member not working on a task to feel left out. If they really are attending meetings all day there is a chance to they haven’t picked up any tasks and therefore won’t speak. So, at the end of the standup ask a quick question for any closing or final comments. This is the opportunity to team members to say “I need to leave early today,” but I would keep the focus on today and away from team members trying to justify their time from yesterday. If there really is a concern about yesterday that should be brought up directly in their 1:1 with their manager and not the team.\nAs a project lead and manager I find walking the board to be significantly more useful as I can tell exactly the progress of the project (as I’m looking at the tickets) and I can also be sure that Jira tickets for the project are up to date. As an individual contributor I don’t feel like I have to prepare as much for this standup and I can just attend and focus on what everyone else is saying.\n","date":1499558400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1499558400,"objectID":"de7f74e948afa249aab52c76a0875be3","permalink":"https://hrakaroo.com/post/walking-the-board/","publishdate":"2017-07-09T00:00:00Z","relpermalink":"/post/walking-the-board/","section":"post","summary":"Running a productive focused standup","tags":null,"title":"Walking the board","type":"post"},{"authors":null,"categories":null,"content":"One Seat Open, an invitation system for limited seating events.\nHistory This project primarily came from a personal frustration in hosting my own game nights. Most invitation systems I researched were open ended (no wait list support) or were so chock full of ads that I could barely navigate them. At the same time I was also looking for a project with which to learn front end development as I have been mostly focused backed development. So this seemed like a perfect opportunity to build my own service.\nDevelopment After researching several frontend frameworks I eventually settled on Vue.js with the Vuetify plugin for several reasons. Vue.js was established enough to have good tutorials, training videos and a robust presence on Stack Overflow for questions. It also had an easy ramp up and it didn’t originate from Facebook. (Petty, I know, but I have a personal distain of Facebook).\nStatus In November of 2019 I launched the site and moved hosting my game night to the system so I can start “eating my own dog food.” I still have several large features I want to add before I really start start trying to push it more globally.\nFor now I’m keeping it closed source, but free to use. If the service proves popular I will likely be forced to add either a for-pay section or ads to cover my hosting fees, but otherwise I have no immediate commercialization plans for the service.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"a7deca733f1b099c5162b295dde0da1d","permalink":"https://hrakaroo.com/project/one-seat-open/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/one-seat-open/","section":"project","summary":"Invitation system for events with limited seating","tags":["Kotlin","Vuejs"],"title":"One Seat Open","type":"project"},{"authors":null,"categories":null,"content":"","date":1171065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1171065600,"objectID":"6b6d705afcb01a42443d6c99626aade9","permalink":"https://hrakaroo.com/project/rebound/","publishdate":"2007-02-10T00:00:00Z","relpermalink":"/project/rebound/","section":"project","summary":"A reimplementation of Diamonds in C++/SDL","tags":["Cpp"],"title":"Rebound","type":"project"},{"authors":null,"categories":null,"content":"","date":1100995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1100995200,"objectID":"fcc1d44d4717750fa7081ebd91949b9a","permalink":"https://hrakaroo.com/project/soda-water-ray-tracer/","publishdate":"2004-11-21T00:00:00Z","relpermalink":"/project/soda-water-ray-tracer/","section":"project","summary":"A Ray Tracer in C++","tags":["Cpp","RayTracer"],"title":"Soda Water Ray Tracer","type":"project"}]